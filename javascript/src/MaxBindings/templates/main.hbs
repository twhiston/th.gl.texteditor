///////////////////////////////////////////////////////
//  THIS FILE IS AUTO GENERATED, DO NOT EDIT BY HAND
//   See README.md and ./src/MaxBindings for more
///////////////////////////////////////////////////////


// This require loads all our source code and importantly gives access to the following items
// glRender , repl
var i = require("includes")

inlets = 1;
outlets = 3;
autowatch = 1;

var sKeys = new Dict(jsarguments[2]);

//TODO: move these out of here
var OUT_MAT = false;
var EPHEMERAL_MODE = false;

function loadbang() {
	init();
}

function init() {

    if (jsarguments.length > 1) {
        i.glRender.drawto(jsarguments[1]);
		post("drawing to context: ", jsarguments[1], "\n");
    }
    i.repl.clear();
	//load config from json via a dict string (ie json)
	loadConfigFromJSON(sKeys.stringify())
    //isDisabled = false;

    i.glRender.font("Courier New Bold");
    i.glRender.fontsize(100);
    i.glRender.leadscale(0.94);
    i.glRender.tracking(1);
    i.glRender.line_length(999999);
    i.glRender.alpha(1);

    draw();
}

function keyPress(k) {
	//our functions might return something which we want to output
	//these will usually be messages for max such as the run command
	var msgs = i.repl.keyPress(k)
	for(var a = 0; a < msgs.length; a++){
		outlet(2, msgs[a]);
	}
	draw();
}

// output the parsed code if output_matrix is disabled
//TODO: fix this function to new code
function run() {
	outlet(0, "jit_matrix", i.glRender.textMtx.name);
	if (!OUT_MAT) {
		var out = i.repl.tb.format(false);
		outlet(0, out);
		// outlet(0, mtxToSymbol(textMtx));
	}
	if (EPHEMERAL_MODE) {
		i.glRender.clear();
	}
}

// TODO: maybe move this into a class?
function output_matrix(v) {
    OUT_MAT = v != 0;
}

// draw the text and output all info
function draw() {

	i.glRender.draw(i.repl.tb.get(), i.repl.c.position())

	//Send some data out about the state
	//TODO: assumed needed for dynamic resizing which we want to bring into code anyway
	// Should at least be abstracted into a repl class status function
	{{!-- var len = i.repl.tb.getMaxChar();
	var tbLen = i.repl.tb.length();
	outlet(1, "lines", tbLen);
	outlet(1, "line", i.repl.tb.getLine());
	outlet(1, "length", len);
	outlet(1, "nLength", len / i.repl.config.MAX_CHARS);
	outlet(1, "nLines", (tbLen - 1) / (i.repl.config.BUFFER_SIZE - 1)); --}}
	//Send some data out about the state
	var status = i.repl.status()
	for (var a = 0; a < status.length; a++) {
  		outlet(1, status[a])
	}

}

// REPL BINDINGS
// Functions below here are generated from class methods decorated with @maxMspBinding
// This exposes functions to the max api so they can be called in max
{{#each functions}}
{{rendered }}

{{/each}} 